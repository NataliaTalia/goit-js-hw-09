{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SASMC,EAAUC,SAASC,cAAc,SACtBD,SAASC,cAAc,kBACvBD,SAASC,cAAc,iBACtBD,SAASC,cAAc,mBAC1BD,SAASC,cAAc,UAItC,SAASC,EAAcC,EAAUC,GAE/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAE3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAY,WAENH,EAEFF,EAAS,CAAEH,WAAUC,UAGrBG,EAAQ,CAAEJ,WAAUC,S,GAGrBA,E,IAMPL,EAAQa,iBAAiB,UAAU,SAACC,GAClCA,EAAEC,iBAGF,IAAMC,EAAQC,OAAOjB,EAAQkB,SAASb,MAAMc,OAC5CC,QAAQC,IAAIL,GACZ,IAAMM,EAAOL,OAAOjB,EAAQkB,SAASI,KAAKH,OAC1CC,QAAQC,IAAIC,GACZ,IAAMC,EAASN,OAAOjB,EAAQkB,SAASK,OAAOJ,OAC9CC,QAAQC,IAAIE,GAMZ,IAJA,IAAIC,EAAW,EAEXC,EAAeT,EAEXU,EAAI,EAAGA,GAAKH,EAAQG,GAAG,EAI7BvB,EAFAqB,GAAY,EAEYC,GACzBE,MAAK,SAAAC,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MACjBwB,EAAA/B,GAASgC,OAAOC,QAAQ,uBAAwCC,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAEvE4B,OAAM,SAAAL,G,IAAGxB,EAAQwB,EAARxB,SAAUC,EAAKuB,EAALvB,MAClBwB,EAAA/B,GAASgC,OAAOI,QAAQ,sBAAqCF,OAAf5B,EAAS,QAAY4B,OAAN3B,EAAM,M,IAGrEoB,GAAgBH,EAGhBtB,EAAQmC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n// 1. Get access to the elements of the form and the form itself;\n// 2. Add submit event listener to the form Button; get access to fields values;\n// 3. Loop through the promisified function and call it as many times as \n// it is said in the amount field;\n// 4. Number of promise = position; \n// Take into the account delay for the first function call and steps;\n// 5.\n\nconst formRef = document.querySelector('.form');\nconst delayRef = document.querySelector('[name=\"delay\"]');\nconst stepsRef = document.querySelector('[name=\"step\"]');\nconst amountRef = document.querySelector('[name=\"amount\"]');\nconst btnRef = document.querySelector('button');\n\n\n\nfunction createPromise(position, delay) {\n\n  return new Promise((resolve, reject) => {\n\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout (() => {\n\n      if (shouldResolve) {\n        // Fulfill\n        resolve ({ position, delay });\n        \n      } else {\n        reject ({ position, delay });\n        // Reject\n      }\n    }, delay)\n  })\n  \n}\n\n\nformRef.addEventListener('submit', (e) => {\n  e.preventDefault();\n  \n \n  const delay = Number(formRef.elements.delay.value);\n  console.log(delay);\n  const step = Number(formRef.elements.step.value);\n  console.log(step);\n  const amount = Number(formRef.elements.amount.value);\n  console.log(amount)\n\n  let position = 0;\n\n  let promiseDelay = delay;\n\n  for(let i = 1; i <= amount; i+=1) {\n    \n    position += 1;\n\n    createPromise(position, promiseDelay)\n  .then(({ position, delay }) => {\n    Notiflix.Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    Notiflix.Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n  \n  promiseDelay += step;\n  }\n  \n  formRef.reset()\n})\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$formRef","document","querySelector","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","preventDefault","delay1","Number","elements","value","console","log","step","amount","position1","promiseDelay","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.f448f228.js.map"}